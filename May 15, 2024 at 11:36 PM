# Assuming the data frame is loaded as df
df <- GENSACPE_STORAGE_REPORT

# Ensure Sys.Date is being called correctly and convert to POSIXct for compatibility if needed
current_date <- as.POSIXct(Sys.Date(), tz = "GMT")
one_year_ago <- current_date - (365 * 24 * 60 * 60) # Subtract seconds equivalent to one year
four_years_ago <- current_date - (4 * 365 * 24 * 60 * 60) # Subtract seconds equivalent to four years

# Filter records from the last year by converting ReportDate to POSIXct if not already
last_year_data <- df %>%
  filter(as.POSIXct(ReportDate, tz = "GMT") >= one_year_ago)

# Filter records from the last four years by converting ReportDate to POSIXct if not already
four_year_data <- df %>%
  filter(as.POSIXct(ReportDate, tz = "GMT") >= four_years_ago)

# Select only the necessary columns to ensure consistency
last_year_data <- last_year_data[c("ReportDate", "Region", "StorageAmount")]
four_year_data <- four_year_data[c("ReportDate", "Region", "StorageAmount")]

# Initialize the structure for min_max_data with the same columns
min_max_data <- data.frame(ReportDate = as.POSIXct(character()), Region = character(), StorageAmount = numeric(), stringsAsFactors = FALSE)

# Function to calculate min and max for each date per region over the last four years
calculate_min_max <- function(data) {
  min_data <- data %>%
    group_by(ReportDate, Region) %>%
    summarize(min_storage = min(StorageAmount, na.rm = TRUE), .groups = 'drop')
  
  max_data <- data %>%
    group_by(ReportDate, Region) %>%
    summarize(max_storage = max(StorageAmount, na.rm = TRUE), .groups = 'drop')
  
  min_max_data <- bind_rows(
    min_data %>% rename(StorageAmount = min_storage),
    max_data %>% rename(StorageAmount = max_storage)
  )
  
  return(min_max_data)
}

# Call the function on the last 4 years data
min_max_data <- calculate_min_max(four_year_data)

# Ensure both data sets have the same structure before combining
if (all(names(last_year_data) == names(min_max_data))) {
  StorageReport <- rbind(last_year_data, min_max_data)
} else {
  stop("Datasets have different structures and cannot be combined.")
}

# Print out the check
print(head(StorageReport))