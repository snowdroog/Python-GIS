from Spotfire.Dxp.Data import DataValueCursor, Row

# Function to be called by the button to add a new row to the OutageScenarios table
def addOutageScenario(sender, args):
    # Get the document properties
    platformShutdownDate = Document.Properties["PlatformShutdownDate"]
    platformShutdownPeriod = Document.Properties["PlatformShutdownPeriod"]
    platformOfflineDate = Document.Properties["PlatformOfflineDate"]
    platformOfflinePeriod = Document.Properties["PlatformOfflinePeriod"]
    platformRestartDate = Document.Properties["PlatformRestartDate"]
    platformRestartPeriod = Document.Properties["PlatformRestartPeriod"]
    platformBackOnlineDate = Document.Properties["PlatformBackOnlineDate"]
    
    refineryShutdownDate = Document.Properties["RefineryShutdownDate"]
    refineryShutdownPeriod = Document.Properties["RefineryShutdownPeriod"]
    refineryOfflineDate = Document.Properties["RefineryOfflineDate"]
    refineryOfflinePeriod = Document.Properties["RefineryOfflinePeriod"]
    refineryRestartDate = Document.Properties["RefineryRestartDate"]
    refineryRestartPeriod = Document.Properties["RefineryRestartPeriod"]
    refineryBackOnlineDate = Document.Properties["RefineryBackOnlineDate"]

    # Get the data table where the data needs to be added
    dataTable = Document.Data.Tables["OutageScenarios"]

    # Create cursors for each column
    cursors = {}
    columnNames = ["PLATFORM_SHUTDOWN_DATE", "PLATFORM_SHUTDOWN_PERIOD", "PLATFORM_OFFLINE_DATE", "PLATFORM_OFFLINE_PERIOD", 
                   "PLATFORM_RESTART_DATE", "PLATFORM_RESTART_PERIOD", "PLATFORM_BACK_ONLINE_DATE",
                   "REFINERY_SHUTDOWN_DATE", "REFINERY_SHUTDOWN_PERIOD", "REFINERY_OFFLINE_DATE", "REFINERY_OFFLINE_PERIOD", 
                   "REFINERY_RESTART_DATE", "REFINERY_RESTART_PERIOD", "REFINERY_BACK_ONLINE_DATE"]
    
    for columnName in columnNames:
        cursors[columnName] = DataValueCursor.CreateFormatted(dataTable.Columns[columnName])

    # Create a new row and set the values using RowWriter
    with dataTable.AsWriteable():
        rowWriter = dataTable.CreateRowWriter()
        try:
            row = rowWriter.NewRow()
            row.Set(cursors["PLATFORM_SHUTDOWN_DATE"], platformShutdownDate)
            row.Set(cursors["PLATFORM_SHUTDOWN_PERIOD"], platformShutdownPeriod)
            row.Set(cursors["PLATFORM_OFFLINE_DATE"], platformOfflineDate)
            row.Set(cursors["PLATFORM_OFFLINE_PERIOD"], platformOfflinePeriod)
            row.Set(cursors["PLATFORM_RESTART_DATE"], platformRestartDate)
            row.Set(cursors["PLATFORM_RESTART_PERIOD"], platformRestartPeriod)
            row.Set(cursors["PLATFORM_BACK_ONLINE_DATE"], platformBackOnlineDate)
            row.Set(cursors["REFINERY_SHUTDOWN_DATE"], refineryShutdownDate)
            row.Set(cursors["REFINERY_SHUTDOWN_PERIOD"], refineryShutdownPeriod)
            row.Set(cursors["REFINERY_OFFLINE_DATE"], refineryOfflineDate)
            row.Set(cursors["REFINERY_OFFLINE_PERIOD"], refineryOfflinePeriod)
            row.Set(cursors["REFINERY_RESTART_DATE"], refineryRestartDate)
            row.Set(cursors["REFINERY_RESTART_PERIOD"], refineryRestartPeriod)
            row.Set(cursors["REFINERY_BACK_ONLINE_DATE"], refineryBackOnlineDate)
            rowWriter.WriteRow(row)
        finally:
            rowWriter.Close()

# Link this function to a button for execution in the Spotfire Analyst client
addOutageScenario(None, None)